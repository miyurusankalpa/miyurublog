{"componentChunkName":"component---src-templates-blog-post-js","path":"/linux-google-brr/","result":{"data":{"site":{"siteMetadata":{"title":"Miyuru Tech Blog"}},"markdownRemark":{"id":"a001be9a-af21-5d52-a9df-ec2fceb2faf6","excerpt":"Google’s BBR (Bottleneck Bandwidth and Round-trip propagation time) is a congestion control algorithm that can significantly improve network performance. In…","html":"<p>Google’s BBR (Bottleneck Bandwidth and Round-trip propagation time) is a congestion control algorithm that can significantly improve network performance. In this post, I’ll guide you through enabling BBR on your Linux system to boost network speeds.</p>\n<h2>What is BBR?</h2>\n<p>BBR is a TCP congestion control algorithm developed by Google that optimizes network throughput and reduces latency. Unlike traditional loss-based congestion control algorithms, BBR uses bandwidth and round-trip time measurements to build a model of the network, allowing for better utilization of available bandwidth.</p>\n<h2>Prerequisites</h2>\n<p>Before we begin, ensure you have:</p>\n<ul>\n<li>A Linux system with root access</li>\n<li>A kernel version 4.9 or newer</li>\n</ul>\n<h2>Step 1: Check if BBR is available in your kernel</h2>\n<p>First, let’s check if BBR is available in your system:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo sysctl net.ipv4.tcp_available_congestion_control</span></span></span></code></pre>\n<p>If BBR is available, you should see something like:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span></span></code></pre>\n<p>If BBR is not listed, you may need to load the module:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo modprobe tcp_bbr</span></span></span></code></pre>\n<p>Verify the module is loaded:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">lsmod </span><span class=\"mtk7\">|</span><span class=\"mtk1\"> grep bbr</span></span></span></code></pre>\n<h2>Step 2: Configure the system to use BBR</h2>\n<p>Now, we need to configure the system to use BBR. Create or edit the sysctl configuration file:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo nano /etc/sysctl.conf</span></span></span></code></pre>\n<p>Add the following lines at the end of the file:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">net.core.default_qdisc = cake</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">net.ipv4.tcp_congestion_control = bbr</span></span></code></pre>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"language-text\">cake</code> qdisc (queue discipline) works well with BBR. Alternatively, you can use <code class=\"language-text\">fq</code> if <code class=\"language-text\">cake</code> is not available.</p>\n</blockquote>\n<h2>Step 3: Apply the changes</h2>\n<p>Apply the new settings:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo sysctl -p</span></span></span></code></pre>\n<h2>Step 4: Verify BBR is enabled</h2>\n<p>To confirm BBR is now active:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo sysctl net.ipv4.tcp_congestion_control</span></span></span></code></pre>\n<p>You should see:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">net.ipv4.tcp_congestion_control = bbr</span></span></code></pre>\n<h2>Benefits of Using BBR</h2>\n<ul>\n<li><strong>Higher throughput</strong>: BBR can achieve higher network throughput compared to other congestion control algorithms.</li>\n<li><strong>Lower latency</strong>: It reduces bufferbloat and maintains lower latencies.</li>\n<li><strong>Better performance on lossy networks</strong>: BBR handles packet loss more efficiently than traditional algorithms.</li>\n<li><strong>Improved experience</strong>: Faster downloads, smoother streaming, and better overall connection stability.</li>\n</ul>\n<h2>Conclusion</h2>\n<p>By enabling Google’s BBR algorithm on your Linux system, you can significantly improve your network performance. BBR is particularly effective for high-bandwidth, high-latency connections, but it can benefit almost any network environment.</p>\n<p>Remember that kernel updates may reset these settings, so you might need to reapply them after major system updates.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Speeding Up Your Network with Google BBR","date":"February 28, 2025","description":"Speeding Up Your Network with Google BBR which is a congestion control algorithm that can significantly improve network performance"}},"previous":{"fields":{"slug":"/intel-network-kernal-iisue/"},"frontmatter":{"title":"Intel Network PCIe Issue"}},"next":{"fields":{"slug":"/ipv6-docker-registries-2025/"},"frontmatter":{"title":"IPv6 Support in Public Docker Registries"}}},"pageContext":{"id":"a001be9a-af21-5d52-a9df-ec2fceb2faf6","previousPostId":"b0a190a0-42b2-5b28-b229-19e2f022af79","nextPostId":"bce1337e-d1d7-5193-9c55-d3e22f23ed02"}},"staticQueryHashes":["1206640803","2841359383"]}